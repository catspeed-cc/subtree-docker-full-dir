#!/bin/bash

# sd-reforge-menu.sh

# required to function correctly
set -euo pipefail  # Exit on error, undefined var, pipe failure

# STILL needed: this is a fallback
# Function to find the Git root directory, ascending up to 6 levels
# Required for source line to be accurate and work from all locations
find_git_root() {
    local current_dir="$(pwd)"
    local max_levels=6
    local level=0
    local dir="$current_dir"

    while [[ $level -le $max_levels ]]; do
        if [[ -d "$dir/.git" ]]; then
            echo "$dir"
            return 0
        fi
        # Go up one level
        dir="$(dirname "$dir")"
        # If we've reached the root (e.g., /), stop early
        if [[ "$dir" == "/" ]] || [[ "$dir" == "//" ]]; then
            break
        fi
        ((level++))
    done

    echo "Error: .git directory not found within $max_levels parent directories." >&2
    return 1
}

find_project_root() {

  export PROJECT_ROOT=""
  SAUCE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

  # Check if we are inside the 'docker' directory (current path contains /docker)
  if [[ "$PWD" == *"/docker" || "$PWD" == *"/docker/"* ]] && \
     [[ -d "./sauce_scripts" && \
        -d "./compose_files" && \
        -d "./sauce_scripts_baked_into_docker_image" && \
        -f "./compose_files/docker-compose.yaml" ]]; then
      # Confirmed: we are in the correct docker/ directory
      echo "‚úÖ Running inside valid docker/ directory."
      export PROJECT_ROOT="$(dirname "$PWD")"
    
  # Last resort: check if we can find commonlib.sh relative to current location
  elif [[ -f "./docker/lib/commonlib.sh" ]]; then
    echo "‚úÖ Found docker/lib/commonlib.sh ‚Äî assuming current directory is project root."
    export PROJECT_ROOT="$PWD"
  fi

  # Attempt to detect Git root
  export GIT_ROOT=$(find_git_root)

  # Nested logic: decide PROJECT_ROOT and validate everything in one flow
  if [[ -n "$GIT_ROOT" && -d "$GIT_ROOT" && -f "$GIT_ROOT/docker/lib/commonlib.sh" ]]; then
    # Git root is valid AND points to a real sd-reforge project
    export PROJECT_ROOT="$GIT_ROOT"
  else
    # No valid Git root ‚Äî rely on existing PROJECT_ROOT
    # If PROJECT_ROOT unset or empty AND directory does not exist
    if [[ ! -n "$PROJECT_ROOT" && ! -d "$PROJECT_ROOT" ]]; then
        export GIT_ROOT="error"
        export PROJECT_ROOT="error"
    else
      # OVERRIDE GIT_ROOT
      GIT_ROOT=$PROJECT_ROOT
    fi   
  fi
  
  echo "üìÅ Git root set to: $GIT_ROOT"
  echo "üìÅ Project root set to: $PROJECT_ROOT" 

}

# find the GIT_ROOT or PROJECT_ROOT (set both variables, source common config first time)
find_project_root

# safely test for commonlib/commoncfg and attempt sourcing it :)
if [[ -f "$GIT_ROOT/docker/lib/commonlib.sh" && -f "$GIT_ROOT/docker/lib/commoncfg.sh" ]]; then
  # DO NOT source the lib again, it is already sourced and it would create infinite loop
  # source the config
  if ! source "$GIT_ROOT/docker/lib/commoncfg.sh"; then
    echo "‚ùå Failed to source commoncfg.sh." >&2
    echo "   Check sauces archive is installed in project root." >&2
    echo "   Consult README.md custom/cutdown install or file catspeed-cc issue ticket." >&2
    exit 1
  else
    GIT_ROOT=$PROJECT_ROOT
  fi
fi

if [[ "$PROJECT_ROOT" = "error" || "$PROJECT_ROOT" = "error" ]]; then
  echo "‚ùå Failed to determine valid GIT_ROOT." >&2
  echo "‚ùå Failed to determine valid PROJECT_ROOT." >&2
  echo "   Neither a Git-controlled sd-reforge repo nor valid PROJECT_ROOT found." >&2
  echo "   Consult README.md or file catspeed-cc issue ticket." >&2
  exit 1
fi

source ${GIT_ROOT}/docker/lib/commonlib.sh

echo "#"
echo "##"
echo "## sdf-menu - sdf-docker-menu.sh script initiated"
echo "##"
echo "## Providing menu to user for docker management"
echo "##"
echo "#"

sleep 1
clear
reset

# Navigate to the docker directory
cd "${GIT_ROOT}/docker" || { echo "Failed to enter docker directory"; exit 1; }

REL_DOCKER_DIR="./docker/sauce_scripts"

# Main menu function
show_menu() {
    clear
    echo "===================================="
    echo "    sd-reforge Docker Management Menu "
    echo "===================================="
    echo "Please refer to README.md for installation and use :)"
    echo
    echo "üîß Sauces Installation"
    echo "  1) 'docker-install-sauces.sh' - Install Sauces to ~/.bashrc"
    echo "  2) 'docker-uninstall-sauces.sh' - Uninstall Sauces from ~/.bashrc"
    echo
    echo "üîß Container Configuration"
    echo "  3) 'docker-config-cpu-only.sh' - Edit the main/cpu configuration file (req'd for all)"
    echo "  4) 'docker-config-single-gpu-only.sh' - Edit the single gpu configuration file (req'd for gpu)"
    echo "  5) 'docker-config-multi-gpu-only.sh' - Edit the multi gpu configuration file (req'd for gpu)"
    echo
    echo "üîß Container Install"
    echo "  6) 'docker-init-cpu-only.sh' - Initialize CPU-Only Container (NVIDIA)"
    echo "  7) 'docker-init-single-gpu-only.sh' - Initialize Single-GPU Container (NVIDIA)"
    echo "  8) 'docker-init-multi-gpu-only.sh' - Initialize Multi-GPU Container (NVIDIA)"
    echo
    echo "üì¶ Container Management"
    echo "  9) 'docker-start-containers.sh' - Start All Containers"
    echo " 10) 'docker-stop-containers.sh' - Stop All Containers"
    echo " 11) 'docker-reinstall-container-deps.sh' - Reinstall Container Dependencies"
    echo " 12) 'docker-tail-container-logs.sh' - Tail Container logs"
    echo
    echo "üóëÔ∏è  Container Uninstall"
    echo " 13) 'docker-destroy-cpu-only.sh' - Destroy CPU-Only Container"
    echo " 14) 'docker-destroy-single-gpu-only.sh' - Destroy Single-GPU Container"
    echo " 15) 'docker-destroy-multi-gpu-only.sh' - Destroy Multi-GPU Container"
    echo
    echo "üß© Advanced & Maintenance"
    echo
    echo "  Q) Quit"
    echo
    printf " Choose an option: "
}

# Main loop
while true; do
    show_menu
    read -r choice

    case "${choice,,}" in
        "q")
            echo
            echo "Exiting. Goodbye!"
            break
            ;;

        "1")
            echo
            echo "Installing sauces to ~/.bashrc..."
            echo "----------------------------------------"
            ESCRIPT_NAME=docker-install-sauces.sh
            ESCRIPT=$SAUCE_DIR/$ESCRIPT_NAME
            if [[ -x "$ESCRIPT" ]]; then
              sleep 1
              "$ESCRIPT"
            else
              echo "Error: $ESCRIPT_NAME not found or not executable."
            fi
            read -p "Press Enter to continue..."
            ;;

        "2")
            echo
            echo "Uninstalling sauces from ~/.bashrc..."
            echo "----------------------------------------"
            ESCRIPT_NAME=docker-uninstall-sauces.sh
            ESCRIPT=$SAUCE_DIR/$ESCRIPT_NAME
            if [[ -x "$ESCRIPT" ]]; then
              sleep 1
              "$ESCRIPT"
            else
              echo "Error: $ESCRIPT_NAME not found or not executable."
            fi
            read -p "Press Enter to continue..."
            ;;

        "3")
            echo
            echo "Editing main/cpu config (req'd for all)..."
            echo "----------------------------------------"
            ESCRIPT_NAME=docker-config-cpu-only.sh
            ESCRIPT=$SAUCE_DIR/$ESCRIPT_NAME
            if [[ -x "$ESCRIPT" ]]; then
              sleep1
              "$ESCRIPT"
            else
              echo "Error: $ESCRIPT_NAME not found or not executable."
            fi
            ;;

        "4")
            echo
            echo "Editing single gpu only config (req'd for single gpu)..."
            echo "----------------------------------------"
            ESCRIPT_NAME=docker-config-single-gpu-only.sh
            ESCRIPT=$SAUCE_DIR/$ESCRIPT_NAME
            if [[ -x "$ESCRIPT" ]]; then
              sleep1
              "$ESCRIPT"
            else
              echo "Error: $ESCRIPT_NAME not found or not executable."
            fi
            ;;

        "5")
            echo
            echo "Editing single of multi gpu only config (req'd for single of multi gpu)..."
            echo "----------------------------------------"
            ESCRIPT_NAME=docker-config-multi-gpu-only.sh
            ESCRIPT=$SAUCE_DIR/$ESCRIPT_NAME
            if [[ -x "$ESCRIPT" ]]; then
              sleep1
              "$ESCRIPT"
            else
              echo "Error: $ESCRIPT_NAME not found or not executable."
            fi
            ;;

        "6")
            echo
            echo "Creating cpu only container..."
            echo "----------------------------------------"
            ESCRIPT_NAME=docker-init-cpu-only.sh
            ESCRIPT=$SAUCE_DIR/$ESCRIPT_NAME
            if [[ -x "$ESCRIPT" ]]; then
              sleep1
              "$ESCRIPT"
            else
              echo "Error: $ESCRIPT_NAME not found or not executable."
            fi
            read -p "Press Enter to continue..."
            ;;

        "7")
            echo
            echo "Creating single gpu only container..."
            echo "----------------------------------------"
            ESCRIPT_NAME=docker-init-single-gpu-only.sh
            ESCRIPT=$SAUCE_DIR/$ESCRIPT_NAME
            if [[ -x "$ESCRIPT" ]]; then
              sleep1
              "$ESCRIPT"
            else
              echo "Error: $ESCRIPT_NAME not found or not executable."
            fi
            read -p "Press Enter to continue..."
            ;;

        "8")
            echo
            echo "Creating single of multi gpu only container..."
            echo "----------------------------------------"
            ESCRIPT_NAME=docker-init-multi-gpu-only.sh
            ESCRIPT=$SAUCE_DIR/$ESCRIPT_NAME
            if [[ -x "$ESCRIPT" ]]; then
              sleep1
              "$ESCRIPT"
            else
              echo "Error: $ESCRIPT_NAME not found or not executable."
            fi
            read -p "Press Enter to continue..."
            ;;

        "9")
            echo
            echo "Starting container(s)..."
            echo "----------------------------------------"
            ESCRIPT_NAME=docker-start-containers.sh
            ESCRIPT=$SAUCE_DIR/$ESCRIPT_NAME
            if [[ -x "$ESCRIPT" ]]; then
              sleep1
              "$ESCRIPT"
            else
              echo "Error: $ESCRIPT_NAME not found or not executable."
            fi
            read -p "Press Enter to continue..."
            ;;

        "10")
            echo
            echo "Stopping container(s)..."
            echo "----------------------------------------"
            ESCRIPT_NAME=docker-stop-containers.sh
            ESCRIPT=$SAUCE_DIR/$ESCRIPT_NAME
            if [[ -x "$ESCRIPT" ]]; then
              sleep1
              "$ESCRIPT"
            else
              echo "Error: $ESCRIPT_NAME not found or not executable."
            fi
            read -p "Press Enter to continue..."
            ;;

        "11")
            echo
            echo "Reinstalling container(s) dependencies... (must be running!)"
            echo "----------------------------------------"
            ESCRIPT_NAME=docker-reinstall-container-deps.sh
            ESCRIPT=$SAUCE_DIR/$ESCRIPT_NAME
            if [[ -x "$ESCRIPT" ]]; then
              sleep1
              "$ESCRIPT"
            else
              echo "Error: $ESCRIPT_NAME not found or not executable."
            fi
            read -p "Press Enter to continue..."
            ;;

        "12")
            echo
            echo "Tail container logs... (must be running!)"
            echo "----------------------------------------"
            ESCRIPT_NAME=docker-tail-container-logs.sh
            ESCRIPT=$SAUCE_DIR/$ESCRIPT_NAME
            if [[ -x "$ESCRIPT" ]]; then
              sleep1
              "$ESCRIPT"
            else
              echo "Error: $ESCRIPT_NAME not found or not executable."
            fi
            ;;

        "13")
            echo
            echo "Destroying cpu only container... (must be running!)"
            echo "----------------------------------------"
            ESCRIPT_NAME=docker-destroy-cpu-only.sh
            ESCRIPT=$SAUCE_DIR/$ESCRIPT_NAME
            if [[ -x "$ESCRIPT" ]]; then
              sleep1
              "$ESCRIPT"
            else
              echo "Error: $ESCRIPT_NAME not found or not executable."
            fi
            read -p "Press Enter to continue..."
            ;;

        "14")
            echo
            echo "Destroying single gpu only container... (must be running!)"
            echo "----------------------------------------"
            ESCRIPT_NAME=docker-destroy-single-gpu-only.sh
            ESCRIPT=$SAUCE_DIR/$ESCRIPT_NAME
            if [[ -x "$ESCRIPT" ]]; then
              sleep1
              "$ESCRIPT"
            else
              echo "Error: $ESCRIPT_NAME not found or not executable."
            fi
            read -p "Press Enter to continue..."
            ;;

        "15")
            echo
            echo "Destroying single of multi gpu only container... (must be running!)"
            echo "----------------------------------------"
            ESCRIPT_NAME=docker-destroy-multi-gpu-only.sh
            ESCRIPT=$SAUCE_DIR/$ESCRIPT_NAME
            if [[ -x "$ESCRIPT" ]]; then
              sleep1
              "$ESCRIPT"
            else
              echo "Error: $ESCRIPT_NAME not found or not executable."
            fi
            read -p "Press Enter to continue..."
            ;;

          *)
            echo
            echo "Invalid option: '$choice'. Please select a valid number or 'Q' to quit."
            read -p "Press Enter to continue..."
            ;;
            
    esac
  
done


























